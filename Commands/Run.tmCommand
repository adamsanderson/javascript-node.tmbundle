<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>saveActiveFile</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby

	require ENV["TM_SUPPORT_PATH"] + "/lib/tm/executor"
	require ENV["TM_SUPPORT_PATH"] + "/lib/tm/save_current_document"

	TextMate.save_current_document
	TextMate::Executor.make_project_master_current_document

	error_fd = nil
	TextMate::Executor.run("node", ENV["TM_FILEPATH"]) do |str, type|
	  error_fd ||= IO.for_fd(ENV["TM_ERROR_FD"].to_i)
	  case type
	  when :err
		  err_details = /^([^\:]+): (\w+.*)$/           # the actual error line (TypeError: Unknown method)
		  err_filedetails = /^\s+([^\(]+)\s\(([^\:]+):(\d+):(\d+)\)/ # specific file, line, column

      is_known_error = (str =~ err_details || str =~ err_filedetails)
      error_fd &lt;&lt; "&lt;div id=\"exception_report\" class=\"framed\"&gt;\n" if is_known_error

		  case str
		  when err_details
		    err, msg = $1, $2
        error_fd &lt;&lt; "&lt;p id=\"exception\"&gt;&lt;strong&gt;#{htmlize err}&lt;/strong&gt;: #{htmlize msg}&lt;/p&gt;\n"
				
		  when err_filedetails
		    at_call, filepath, line, column = $1, $2, $3.to_i, $4.to_i
        src = link = nil

        if File.readable?(filepath)
			    document = File.readlines(filepath)
          src = htmlize(document[line-1].chomp)
          link = "txmt://open?url=file://#{filepath}&amp;line=#{line}&amp;column=#{column}"
        end

        error_fd &lt;&lt; "&lt;br/&gt;#{htmlize(at_call)}"
        error_fd &lt;&lt; "&lt;pre&gt;#{src}\n#{' ' * (column-1)}â†‘&lt;/pre&gt;" if src
        error_fd &lt;&lt;  "&lt;blockquote&gt;"
        error_fd &lt;&lt; "&lt;a href=\"#{link}\"&gt;" if link
        error_fd &lt;&lt; "line #{line}, column #{column}"
        error_fd &lt;&lt; "&lt;/a&gt;" if link
        error_fd &lt;&lt; " in #{filepath}\n"
		    else
        "&lt;div class=\"err\" style=\"color:red;\"&gt;#{htmlize(str)}&lt;/div&gt;"
		  end
	
		  if is_known_error then
        error_fd &lt;&lt; "&lt;/div&gt;\n"
        error_fd.flush
		    ""
		  end

	  when :out
	    htmlize(str)
	  end
	end</string>
	<key>input</key>
	<string>document</string>
	<key>keyEquivalent</key>
	<string>@r</string>
	<key>name</key>
	<string>Run</string>
	<key>output</key>
	<string>showAsHTML</string>
	<key>scope</key>
	<string>source.js.node</string>
	<key>uuid</key>
	<string>6048F8AB-4457-4A5D-A48A-B9E8378471E8</string>
</dict>
</plist>
